# This homework is done by Hangfei Lin and Ruochen Zhangimport randomclass Ship(object):    """Create Ship Class with specific methods and variables"""    def __init__(self):        """Initialize the instance variables with empty sets"""        self.locations = set()        self.hits = set()    def ok_to_place_ship_at(self, row, column, horizontal, length, ocean):        """Check if it's ok to place this ship with bow at (row, column)"""        loc_dic = ocean.ships        #the ship end should not exceed 9        if horizontal:            if row < 0 or column < 0 or row > 9 or column > (9 - length + 1):                return False        else:            if row < 0 or column < 0 or row > (9 - length + 1)  or column > 9:                return False        if horizontal:            for i in range(-1,length+1):                for j in range(-1, 2):                    if loc_dic.has_key((row+j, column+i)):                        return False        else:            for i in range(-1, 2):                for j in range(-1, length+1):                    if loc_dic.has_key((row+j, column+i)):                        return False        return True    def place_ship_at(self, row, column, horizontal, length, ocean):        """Place this ship at (row, column) by updating ocean.ships and self.locations"""        if horizontal:            for i in range(0,length): ## update locations set                self.locations.add((row, column+i))                           if length == 4:                ocean.ships[(row,column)] = Battleship() ## create object for the bow                for i in range(0, length-1): ## let next part get same reference, length-1 times                    ocean.ships[(row,column+i+1)] = ocean.ships[(row,column+i)]            if length == 3:                ocean.ships[(row,column)] = Cruiser()                for i in range(0, length-1):                    ocean.ships[(row,column+i+1)] = ocean.ships[(row,column+i)]            if length == 2:                ocean.ships[(row,column)] = Destroyer()                ocean.ships[(row,column+1)] = ocean.ships[(row,column)]                           if length == 1:                ocean.ships[(row,column)] = Submarine()        else:            for i in range(0,length): ## update locations set                self.locations.add((row+i, column))                            if length == 4:                ocean.ships[(row,column)] = Battleship() ## create object for the bow                for i in range(0, length-1): ## let next part get same reference, length-1 times                    ocean.ships[(row+i+1,column)] = ocean.ships[(row+i,column)]            if length == 3:                ocean.ships[(row,column)] = Cruiser()                for i in range(0, length-1):                    ocean.ships[(row+i+1,column)] = ocean.ships[(row+i,column)]            if length == 2:                ocean.ships[(row,column)] = Destroyer()                ocean.ships[(row+1,column)] = ocean.ships[(row,column)]                           if length == 1:                ocean.ships[(row,column)] = Submarine()                   def shoot_at(self, location): # location is tuple        """if this ship is not sunk and location is the part not yet be hitten, return True and update hits set, locations set"""        if location in self.locations:            if not self.is_sunk():                if location not in self.hits:                    self.hits.add(location)                    return True        return False    def is_sunk(self):        """Check if this ship is sunk"""        if self.hits == self.locations:            return True        return Falseclass Battleship(Ship):    """Subclass: Battleship"""    def __init__(self):        """Initrialize ship type and its parent class"""        Ship.__init__(self)        self.ship_type = 'battleship'    def get_ship_type(self):        """Return ship_type"""        return self.ship_type    def __str__(self):        """Return single character"""        return 'B'class Cruiser(Ship):    """Subclass: Cruiser"""    def __init__(self):        """Initrialize ship type and its parent class"""        Ship.__init__(self)        self.ship_type = 'cruiser'    def get_ship_type(self):        """Return ship_type"""        return self.ship_type    def __str__(self):        """Return single character"""        return 'C'             class Destroyer(Ship):    """Subclass: Destroyer"""    def __init__(self):        """Initrialize ship type and its parent class"""        Ship.__init__(self)        self.ship_type = 'destroyer'    def get_ship_type(self):        """Return ship_type"""        return self.ship_type    def __str__(self):        """Return single character"""        return 'D'       class Submarine(Ship):    """Subclass: Submarine"""    def __init__(self):        """Initrialize ship type and its parent class"""        Ship.__init__(self)        self.ship_type = 'submarine'    def get_ship_type(self):        """Return ship_type"""        return self.ship_type    def __str__(self):        """Return single character"""        return 'S'class Ocean(object):    """Set the ocean with ships and provide related functions"""        def __init__(self):        """Initializaiton with ten ships and other zero values"""        self.ships = {}        self.shots_fired_lst = []        self.shots_fired = 0        self.hit_count = 0        self.number_of_ships_sunk = 0        self.battleship_one = Battleship()        self.cruiser_one = Cruiser()        self.cruiser_two = Cruiser()        self.destroyer_one = Destroyer()        self.destroyer_two = Destroyer()        self.destroyer_three = Destroyer()        self.submarine_one = Submarine()        self.submarine_two = Submarine()        self.submarine_three = Submarine()        self.submarine_four = Submarine()        #need to put these behind these objects needed        self.place_all_ships_randomly()    def place_all_ships_randomly(self):        """Place all ships randomly"""        while True:            random_col = random.randint(0,9)            random_row = random.randint(0,9)            horizontal = random.randint(0,1)                        if self.battleship_one.ok_to_place_ship_at(random_row, random_col, horizontal, 4, self):                self.battleship_one.place_ship_at(random_row, random_col, horizontal, 4, self)                break        while True:            random_col = random.randint(0,9)            random_row = random.randint(0,9)            horizontal = random.randint(0,1)                        if self.cruiser_one.ok_to_place_ship_at(random_row, random_col, horizontal, 3, self):                self.cruiser_one.place_ship_at(random_row, random_col, horizontal, 3, self)                break        while True:            random_col = random.randint(0,9)            random_row = random.randint(0,9)            horizontal = random.randint(0,1)                        if self.cruiser_two.ok_to_place_ship_at(random_row, random_col, horizontal, 3, self):                self.cruiser_two.place_ship_at(random_row, random_col, horizontal, 3, self)                break        while True:            random_col = random.randint(0,9)            random_row = random.randint(0,9)            horizontal = random.randint(0,1)                        if self.destroyer_one.ok_to_place_ship_at(random_row, random_col, horizontal, 2, self):                self.destroyer_one.place_ship_at(random_row, random_col, horizontal, 2, self)                break        while True:            random_col = random.randint(0,9)            random_row = random.randint(0,9)            horizontal = random.randint(0,1)                        if self.destroyer_two.ok_to_place_ship_at(random_row, random_col, horizontal, 2, self):                self.destroyer_two.place_ship_at(random_row, random_col, horizontal, 2, self)                break        while True:            random_col = random.randint(0,9)            random_row = random.randint(0,9)            horizontal = random.randint(0,1)                        if self.destroyer_three.ok_to_place_ship_at(random_row, random_col, horizontal, 2, self):                self.destroyer_three.place_ship_at(random_row, random_col, horizontal, 2, self)                break        while True:            random_col = random.randint(0,9)            random_row = random.randint(0,9)            horizontal = random.randint(0,1)                        if self.submarine_one.ok_to_place_ship_at(random_row, random_col, horizontal, 1, self):                self.submarine_one.place_ship_at(random_row, random_col, horizontal, 1, self)                break        while True:            random_col = random.randint(0,9)            random_row = random.randint(0,9)            horizontal = random.randint(0,1)                        if self.submarine_two.ok_to_place_ship_at(random_row, random_col, horizontal, 1, self):                self.submarine_two.place_ship_at(random_row, random_col, horizontal, 1, self)                break        #submarine_three = Submarine():        while True:            random_col = random.randint(0,9)            random_row = random.randint(0,9)            horizontal = random.randint(0,1)                        if self.submarine_three.ok_to_place_ship_at(random_row, random_col, horizontal, 1, self):                self.submarine_three.place_ship_at(random_row, random_col, horizontal, 1, self)                break        #submarine_four = Submarine():        while True:            random_col = random.randint(0,9)            random_row = random.randint(0,9)            horizontal = random.randint(0,1)                        if self.submarine_four.ok_to_place_ship_at(random_row, random_col, horizontal, 1, self):                self.submarine_four.place_ship_at(random_row, random_col, horizontal, 1, self)                break    def is_occupied(self, location):        """Check whether a location is occupied"""        for ocean_loc in self.ships.keys():            if location == ocean_loc:                return True        return False    def is_open_sea(self, location):        """Check whether a location is an open area"""        for ocean_loc in self.ships.keys():            distance = (((ocean_loc[0] - location[0]) ** 2                         + (ocean_loc[1] - location[1]) ** 2) ** 0.5)            #print ocean_loc, location, distance            if distance < 2:                return False        return True    def shoot_at(self, location):        """Shoot at a location(tuple), and modify the related ship object."""        self.shots_fired_lst.append(location)        self.shots_fired += 1        #print self.shots_fired_lst, #type(self.shots_fired_set[0])        #any method to do the long code?        if self.battleship_one.shoot_at(location):            self.hit_count += 1            #print "hit battleship_one"            return True        elif self.cruiser_one.shoot_at(location):            self.hit_count += 1            #print "hit cruiser_one"            return True        elif self.cruiser_two.shoot_at(location):            self.hit_count += 1            #print "hit cruiser_two"            return True        elif self.destroyer_one.shoot_at(location):            self.hit_count += 1            #print "hit destroyer_one"            return True        elif self.destroyer_two.shoot_at(location):            self.hit_count += 1            #print "hit destroyer_two"            return True        elif self.destroyer_three.shoot_at(location):            self.hit_count += 1            #print "hit destroyer_three"            return True        elif self.submarine_one.shoot_at(location):            self.hit_count += 1            #print "hit sub1"            return True        elif self.submarine_two.shoot_at(location):            self.hit_count += 1            #print "hit sub2"            return True        elif self.submarine_three.shoot_at(location):            self.hit_count += 1            #print "hit sub3"            return True        elif self.submarine_four.shoot_at(location):            self.hit_count += 1            #print "hit sub4"            return True        else:            return False    def get_shots_fired(self):        """Return the shots fired."""        return self.shots_fired    def get_hit_count(self):        """Return the hit counts."""        return self.hit_count    def get_ships_sunk(self):        """Return the number of ships sunk"""        #evey time the value will be reset. so we need to check from the start        ships_sunk = 0        #???any method to do the long code?        if self.battleship_one.is_sunk():            ships_sunk += 1        if self.cruiser_one.is_sunk():            ships_sunk += 1        if self.cruiser_two.is_sunk():            ships_sunk += 1        if self.destroyer_one.is_sunk():            ships_sunk += 1        if self.destroyer_two.is_sunk():            ships_sunk += 1        if self.destroyer_three.is_sunk():            ships_sunk += 1        if self.submarine_one.is_sunk():            ships_sunk += 1        if self.submarine_two.is_sunk():            ships_sunk += 1        if self.submarine_three.is_sunk():            ships_sunk += 1        if self.submarine_four.is_sunk():            ships_sunk += 1        self.number_of_ships_sunk = ships_sunk        return self.number_of_ships_sunk    def game_is_over(self):        """Return True if the game is over(10 ships are all sunk)"""        number_of_ships_sunk = self.get_ships_sunk()        if self.number_of_ships_sunk == 10:            return True        else:            return False    def get_ocean(self):        """Return the dictionary ships."""        return self.ships    def print_ocean(self):        """Print the ocean to aid the player."""        print "       0 1 2 3 4 5 6 7 8 9"        print "     --------------------"        for i in range(0, 10):            print " ",i," |",            for j in range (0, 10):                loc_set = set([(i, j)])                loc_tuple = (i,j)                #print loc_set, loc_tuple                if self.shots_fired_lst.count(loc_tuple):                    #print "loc_tuple count",                    if self.ships.has_key(loc_tuple):                        if loc_set <= self.battleship_one.hits:                            if self.battleship_one.is_sunk():                                print self.battleship_one,                            else:                                print "*",                        if loc_set <= self.cruiser_one.hits:                            if self.cruiser_one.is_sunk():                                print self.cruiser_one,                            else:                                print "*",                        if loc_set <= self.cruiser_two.hits:                            if self.cruiser_two.is_sunk():                                print self.cruiser_two,                            else:                                print "*",                        if loc_set <= self.destroyer_one.hits:                            if self.destroyer_one.is_sunk():                                print self.destroyer_one,                            else:                                print "*",                        if loc_set <= self.destroyer_two.hits:                            if self.destroyer_two.is_sunk():                                print self.destroyer_two,                            else:                                print "*",                        if loc_set <= self.destroyer_three.hits:                            if self.destroyer_three.is_sunk():                                print self.destroyer_three,                            else:                                print "*",                        if loc_set <= self.submarine_one.hits:                            if self.submarine_one.is_sunk():                                print self.submarine_one,                            else:                                print "*",                        if loc_set <= self.submarine_two.hits:                            if self.submarine_two.is_sunk():                                print self.submarine_two,                            else:                                print "*",                        if loc_set <= self.submarine_three.hits:                            if self.submarine_three.is_sunk():                                print self.submarine_three,                            else:                                print "*",                        if loc_set <= self.submarine_four.hits:                            if self.submarine_four.is_sunk():                                print self.submarine_four,                            else:                                print "*",                                            else:                        print "_",                else:                    print ".",            print                        class BattleshipGame():    """Interaction with the user"""    def __init__(self):        """Create an Ocean object"""        self.ocean_obj = Ocean()            def user_input(self):        """Get user input.(Invalid input would not be allowed, and 'q' to quit)"""        while True:            print            input_str_r = raw_input("Please enter the row you want to shoot at(from 0 to 9)(q to quit)")            if input_str_r == "q":                return False            input_str_c = raw_input("Please enter the column you want to shoot at(from 0 to 9)")                        if input_str_c.isdigit() and input_str_r.isdigit():                if int(input_str_c) >= 0 and int(input_str_c) <= 9:                     if int(input_str_r) >= 0 and int(input_str_r) <= 9:                        input_tuple = (int(input_str_r), int(input_str_c))                        return input_tuple                    else:                        print "Invalid Input. Or input q to quit."                else:                    print "Invalid Input. Or input q to quit."            else:                print "Invalid Input. Or input q to quit."    def game_on(self):        """The main method interact with the user"""        print "Battleship Game Begins!"                while not self.ocean_obj.game_is_over():            user_input_rc = self.user_input()            if not user_input_rc:                break            user_shoot_rc = tuple(user_input_rc)            self.ocean_obj.shoot_at(user_shoot_rc)            self.ocean_obj.print_ocean()            #print self.ocean_obj.ships            #print self.ocean_obj.number_of_ships_sunk        self.print_final()    def print_final(self):        """When game is over, print the final result."""        print        print        print "This is your final scores:"        print "Shots fired:", self.ocean_obj.shots_fired        print "Shots hit:", self.ocean_obj.hit_count        print "Number of Ships Sunk:", self.ocean_obj.number_of_ships_sunk        self.ocean_obj.print_ocean()        if __name__ == '__main__':    game_obj = BattleshipGame()    game_obj.game_on()